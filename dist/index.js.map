{"version":3,"file":"index.js","sources":["../src/Array/chunk/index.js","../src/Array/compact/index.js","../src/lang/isArguments.js","../src/lang/argumentsToArray.js","../src/lang/isArray.js","../src/Array/shallowCopy/index.js","../src/Array/arrayPush/index.js","../src/Array/baseFlat/index.js","../src/Array/concat/index.js","../src/Array/fill/index.js","../src/index.js"],"sourcesContent":["/* @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * chunk(['a', 'b', 'c', 'd'], 2)\n * // => [['a', 'b'], ['c', 'd']]\n *\n * chunk(['a', 'b', 'c', 'd'], 3)\n * // => [['a', 'b', 'c'], ['d']]\n */\n\n// normal\nfunction chunk(array, size) {\n  \n  if (!Array.isArray(array)){\n    return \n  }\n  \n  if (!size || !array.length) {\n    return []\n  }\n \n  const chunkArray = []\n  \n  while(array.length) {\n    \n    if (Math.max(array.length, 1) <= size) {\n      chunkArray.push(array)\n      return chunkArray\n    }\n    \n    chunkArray.push(array.splice(0, size))\n   \n  }\n  \n  return chunkArray\n}\n\n// lodash\nfunction _chunk(array, size) {\n  \n  size = Math.max(size, 0);\n  const length = array == null ? 0 : array.length\n  \n  if (size < 1 || !length) {\n    return []\n  }\n  \n  let index = 0\n  let resIndex = 0\n  const result = new Array(Math.ceil(length / size))\n\n  while (index < length) {\n    result[resIndex++] = array.slice(index, (index += size))\n  }\n  return result\n}\n\nexport default chunk","/*\n  * Creates an array with all falsey values removed. The values `false`, `null`, `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n  * @param {Array} array The array to compact\n  * @returns {Array} Return the new array of filtered values\n  * @example\n  * \n  *  const array = [1,2,3,0,null,false,undefined,NaN,'']\n  *  _compact(array) => [1,2,3]\n  */\n\n// normal\nfunction compact(array) {\n  if (!Array.isArray(array)) {\n    return []\n  }\n  \n  return array.filter(item => !!item)\n}\n\n// lodash\nfunction _compact(array) {\n  if (!Array.isArray(array)) {\n    return []\n  }\n  \n  const result = []\n  let resIndex = 0\n  \n  for (const value of array) {\n    if (value) {\n      result[resIndex++] = value\n    }\n  }\n  \n  return result\n}\n\nexport default compact\n","function isArguments(arg) {\n  return Object.prototype.toString.call(arg) === '[object Arguments]'\n}\n\nexport default isArguments","/**\n  * transform arguments obejct to array\n  *  @param {Object} Arguments Object\n  *  @returns {Array} result return `array`\n  *\n  **/\n\nimport isArguments from './isArguments'\n\nfunction argumentsToArray(arg) {\n  \n  if (!isArguments(arg)) {\n    return []\n  }\n  \n  const result = new Array(arg.length)\n  let resIndex = 0\n  \n  while(resIndex < arg.length) {\n    result[resIndex] = arg[resIndex]\n    \n    resIndex++\n  }\n  \n  return result\n}\n\nexport default argumentsToArray","\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\nexport default isArray","/**\n  *  shallow copy array\n  *  @param {Array} arr The array to copy\n  *  @returns {Array}  return the new array\n  *\n  **/\n\nimport isArray from '../../lang/isArray'\n\nfunction shallowCopy(arr) {\n  if (!isArray(arr)) {\n    return []\n  }\n  \n  const result = []\n  let resIndex = 0\n  \n  while(resIndex < arr.length) {\n    result[resIndex] = arr[resIndex]\n    resIndex++\n  }\n  return result\n}\n\nexport default shallowCopy","/**\n  *  append values to array\n  *  @param {Array} array The array to modify\n  *  @param {Array} values the values to append\n  *  @returns {Array} return `array`\n  */\n\nimport isArray from '../../lang/isArray'\n\nfunction arrayPush(array, values) {\n   \n  if (!isArray(array) || !isArray(values)) {\n    return []\n  }\n  \n  const length = values.length\n  const offsetIndex = array.length\n  let index = 0\n  \n  while(index < length) {\n    array[offsetIndex + index] = values[index]\n    index++\n  }\n  \n  return array\n}\n\nexport default arrayPush","/**\n  *  flat array\n  *  @param {Array} arr The array to flat\n  *  @returns {Array} return `result`\n  *  @example\n  *  \n  *  const arr = [1,2,3, [4,5], [[2], 3]]\n  *  baseFlat(arr) => [1,2,3,4,5,[2],3]\n  *\n  */\n\nimport isArray from '../../lang/isArray'\nimport arrayPush from '../arrayPush'\n\nfunction baseFlat(arr) {\n  \n  if (!isArray(arr)) {\n    return []\n  }\n  \n  let result = []\n  let resIndex = 0\n  \n  while(resIndex < arr.length) {\n    \n    const values = arr[resIndex]\n    if (isArray(values)) {\n      result = arrayPush(result, values)\n      \n    } else {\n      \n      result[resIndex] = values\n    }\n   \n    resIndex = result.length\n  } \n  \n  return result\n}\n\nexport default baseFlat","/**\n  *  concat array\n  *  @param {Array} array The array to concatenate\n  *  @param {*}  values The values to concatenate\n  *  @returns {Array} return the new array\n  *  @example\n  *  \n  *  concat([], 2, [3], [[2,5]]) => [2,5, [2,5]]\n  **/\n\nimport argumentsToArray from '../../lang/argumentsToArray'\nimport isArray from '../../lang/isArray'\nimport shallowCopy from '../shallowCopy'\nimport baseFlat from  '../baseFlat'\nimport arrayPush from '../arrayPush'\n\nfunction concat() {\n  const args = argumentsToArray(arguments)\n  \n  const length = args.length\n  const arr = args[0]\n  const baseArr = isArray(arr) ? arr : [arr]\n  const value = new Array(length ? length - 1 : 0)\n  let index = length\n  \n  while(index--) {\n    value[index - 1] = args[index]\n  }\n  \n  return length ? arrayPush(shallowCopy(baseArr), baseFlat(value)) : []\n}\n\n\nexport default concat\n","/**\n *  Fills elements of array with value from start up to, but not including, end.\n *\n *  @param array (Array): The array to fill.\n *  @param value (*): The value to fill array with.\n *  @param [start=0] (number): The start position.\n *  @param [end=array.length] (number): The end position.\n *  @returns {Array} return result\n *  @example\n *\n *   var array = [1, 2, 3];\n *\n *   fill(array, 'a') => ['a', 'a', 'a']\n *   fill(Array(3), 2) => [2, 2, 2]\n *   fill([4, 6, 8, 10], '*', 1, 3) => [4, '*', '*', 10]\n *\n **/\n\nimport toArray from '../../lang/argumentsToArray'\n\nfunction fill() {\n  const arr = toArray(arguments);\n  const baseArr = arr[0];\n  const filled = arr[1];\n  const arrLen = baseArr.length\n  \n  let start = arr[2] ? arr[2] : 0;\n  let end = arr[3] || arr[3] === 0 ? arr[3] : arrLen\n  \n  if (!filled || !arrLen || start >= arrLen || end < 0) {\n    return [];\n  }\n  \n  if (start < 0) {\n    start = arrLen + start\n  }\n  \n  if (end > arrLen) {\n    end = arrLen\n  }\n\n  while (start < end) {\n\n    baseArr[start++] = filled;\n  }\n\n  return baseArr;\n}\n\nexport default fill;\n","import chunk from './Array/chunk'\nimport compact from './Array/compact'\nimport concat from './Array/concat'\nimport fill from './Array/fill'\n\nexport default {\n  chunk,\n  compact,\n  concat,\n  fill\n}"],"names":["chunk","array","size","Array","isArray","length","chunkArray","Math","max","push","splice","compact","filter","item","isArguments","arg","Object","prototype","toString","call","argumentsToArray","result","resIndex","arr","shallowCopy","arrayPush","values","offsetIndex","index","baseFlat","concat","args","arguments","baseArr","value","fill","toArray","filled","arrLen","start","end"],"mappings":"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"}